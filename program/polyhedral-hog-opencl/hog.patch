diff --git a/pencil-benchmarks-imageproc/hog/HogDescriptor.hpp b/pencil-benchmarks-imageproc/hog/HogDescriptor.hpp
index 79b41e2..274c9fb 100644
--- a/pencil-benchmarks-imageproc/hog/HogDescriptor.hpp
+++ b/pencil-benchmarks-imageproc/hog/HogDescriptor.hpp
@@ -11,7 +11,7 @@
 */
 
 #ifndef HOGDESCRIPTOR_H
-#error This is a private implementation file for HogDescriptor.h, do not include directly
+#error This is a private implementation file for HogDescriptor.h, do not include directly!
 #endif
 
 #ifdef WITH_TBB
@@ -19,6 +19,24 @@
     #include <tbb/blocked_range.h>
 #endif
 
+//CK
+#if (1 == XOPENME)
+#include <xopenme.h>
+#endif
+
+//CK
+#ifndef M_1_PI
+#define M_1_PI 3.14159265358979323846
+#endif
+
+#ifndef SELECT_CL_DEVICE_TYPE
+#define SELECT_CL_DEVICE_TYPE CL_DEVICE_TYPE_GPU
+#endif
+
+#ifndef HOG_CL
+#define HOG_CL "HogDescriptor.cl"
+#endif
+
 namespace {
     template<typename T>
     inline int fast_floor(T f) {
@@ -114,8 +132,10 @@ cv::Mat_<float> nel::HOGDescriptorCPP<numberOfCells, numberOfBins, gauss, spinte
 
         // compute edges, magnitudes, orientations and the histogram
         for (int pointy = minyi; pointy <= maxyi; pointy++) {
+#if defined (__GNUC__)
             #pragma GCC diagnostic push
             #pragma GCC diagnostic ignored "-Wmaybe-uninitialized"
+#endif
             int cellyi;
             float yscale0;
             float yscale1;
@@ -199,7 +219,9 @@ cv::Mat_<float> nel::HOGDescriptorCPP<numberOfCells, numberOfBins, gauss, spinte
                     }
                 }
             }
+#if defined (__GNUC__)
             #pragma GCC diagnostic pop
+#endif
         }
         cv::Mat_<float> destRow = descriptors.row(n);
         cv::Mat(hist).reshape(0,1).copyTo(destRow);
@@ -228,8 +250,9 @@ nel::HOGDescriptorOCL<numberOfCells, numberOfBins, gauss, spinterp, _signed, _st
 
     //Get the used device
     std::vector<cl::Device> devices;
-    cl::Platform::getDefault().getDevices(CL_DEVICE_TYPE_GPU, &devices);
+    cl::Platform::getDefault().getDevices(SELECT_CL_DEVICE_TYPE, &devices);
     m_device = devices.at(0);
+    std::cout << "Device: " << m_device.getInfo<CL_DEVICE_NAME>() << std::endl;
 
     //Create context
     m_context = cl::Context(m_device);
@@ -237,7 +260,7 @@ nel::HOGDescriptorOCL<numberOfCells, numberOfBins, gauss, spinterp, _signed, _st
     m_has_local_memory = (CL_LOCAL == m_device.getInfo<CL_DEVICE_LOCAL_MEM_TYPE>());
 
     //Load source
-    std::ifstream source_file{ "HogDescriptor.cl" };
+    std::ifstream source_file{ HOG_CL };
     std::string source{ std::istreambuf_iterator<char>{source_file}, std::istreambuf_iterator<char>{} };
 
     //Create program
@@ -250,7 +273,9 @@ nel::HOGDescriptorOCL<numberOfCells, numberOfBins, gauss, spinterp, _signed, _st
     build_opts << " -cl-denorms-are-zero";
     build_opts << " -cl-mad-enable";
     build_opts << " -cl-no-signed-zeros";
+#if defined (CL_FINITE_MATH_ONLY)
     build_opts << " -cl-finite-math-only";
+#endif
     build_opts << " -Werror";
     build_opts << " -D NUMBER_OF_CELLS="  << numberOfCells;
     build_opts << " -D NUMBER_OF_BINS="   << numberOfBins;
@@ -269,6 +294,10 @@ nel::HOGDescriptorOCL<numberOfCells, numberOfBins, gauss, spinterp, _signed, _st
     build_opts << " -D DEBUG";
 #endif
 
+#if (1 == XOPENME)
+    xopenme_add_var_s(10, (char*) "  \"kernel_build_options\":\"%s\"", (void*) build_opts.str().c_str());
+#endif
+
     //Build program
     try {
         program.build(build_opts.str().c_str());
@@ -328,16 +357,22 @@ cv::Mat_<float> nel::HOGDescriptorOCL<numberOfCells, numberOfBins, gauss, spinte
     m_queue.enqueueWriteBuffer( locations_cl, CL_FALSE, 0,  locations_bytes,  locations.data);
     auto blocksizes_cl = blocksizes.convert_to_opencl_data(m_context, m_queue);   //If dynamic: creates cl::Buffer like the rest. If static: creates a functor that returns the static value as cl_float
 
+
+#define DEFAULT_LWS_X 4
+#define DEFAULT_LWS_Y 8
+#define DEFAULT_LWS_Z std::min( std::max<size_t>(num_locations / m_device.getInfo<CL_DEVICE_MAX_COMPUTE_UNITS>(), 1), m_calc_hog_group_size / (DEFAULT_LWS_X * DEFAULT_LWS_Y))
+
 #ifndef LWS_X
-#define LWS_X 4
+#define LWS_X DEFAULT_LWS_X
 #endif
 
 #ifndef LWS_Y
-#define LWS_Y 8
+#define LWS_Y DEFAULT_LWS_Y
 #endif
 
+// This allows tuning when only one of the dimensions LWS_X and LWS_Y changes.
 #ifndef LWS_Z
-#define LWS_Z std::min( std::max<size_t>(num_locations / m_device.getInfo<CL_DEVICE_MAX_COMPUTE_UNITS>(), 1), m_calc_hog_group_size / (lws_x * lws_y))
+#define LWS_Z std::min( std::max<size_t>(num_locations / m_device.getInfo<CL_DEVICE_MAX_COMPUTE_UNITS>(), 1), m_calc_hog_group_size / (LWS_X * LWS_Y))
 #endif
     {
         //Figure out the work group sizes
@@ -353,6 +388,20 @@ cv::Mat_<float> nel::HOGDescriptorOCL<numberOfCells, numberOfBins, gauss, spinte
 
         cl_int2 image_size = { image.cols, image.rows };
 
+#if (1 == XOPENME)
+        xopenme_add_var_i(11, (char*) "  \"default_lws_x\":%u", DEFAULT_LWS_X);
+        xopenme_add_var_i(12, (char*) "  \"default_lws_y\":%u", DEFAULT_LWS_Y);
+        xopenme_add_var_i(13, (char*) "  \"default_lws_z\":%u", DEFAULT_LWS_Z);
+
+        xopenme_add_var_i(14, (char*) "  \"lws_x\":%u", lws_x);
+        xopenme_add_var_i(15, (char*) "  \"lws_y\":%u", lws_y);
+        xopenme_add_var_i(16, (char*) "  \"lws_z\":%u", lws_z);
+
+        xopenme_add_var_i(17, (char*) "  \"gws_x\":%u", gws_x);
+        xopenme_add_var_i(18, (char*) "  \"gws_y\":%u", gws_y);
+        xopenme_add_var_i(19, (char*) "  \"gws_z\":%u", gws_z);
+#endif
+
         //Execute the kernel
         {
             //ADD MULTITHREAD LOCK HERE (if needed)
diff --git a/pencil-benchmarks-imageproc/hog/test_hog.cpp b/pencil-benchmarks-imageproc/hog/test_hog.cpp
index a9c88f5..4549f33 100644
--- a/pencil-benchmarks-imageproc/hog/test_hog.cpp
+++ b/pencil-benchmarks-imageproc/hog/test_hog.cpp
@@ -1,9 +1,20 @@
+//CK
+#ifdef WINDOWS
+#include <numeric>
+#include <random>
+#define M_PI 3.14159265358979323846
+#endif
+
+//CK
+#if (1 == XOPENME)
+#include <xopenme.h>
+#endif
+
 #include "utility.hpp"
 #include "HogDescriptor.h"
 
 #include <opencv2/imgproc/imgproc.hpp>
 
-
 #ifndef EXCLUDE_PENCIL_TEST
 #include <prl.h>
 #include "hog.pencil.h"
@@ -13,20 +24,24 @@
 #endif
 
 //Useful set 1:
-//#define NUMBER_OF_CELLS 4
-//#define NUMBER_OF_BINS 8
-//#define GAUSSIAN_WEIGHTS 1
-//#define SPARTIAL_WEIGHTS 1
-//#define SIGNED_HOG 1
-//#define STATIC_HOG 1
+#ifdef HOG4x4
+#define NUMBER_OF_CELLS 4
+#define NUMBER_OF_BINS 8
+#define GAUSSIAN_WEIGHTS 1
+#define SPARTIAL_WEIGHTS 1
+#define SIGNED_HOG 1
+#define STATIC_HOG 1
+#endif
 
 //Useful set 2:
-//#define NUMBER_OF_CELLS 2
-//#define NUMBER_OF_BINS 4
-//#define GAUSSIAN_WEIGHTS 1
-//#define SPARTIAL_WEIGHTS 1
-//#define SIGNED_HOG 0
-//#define STATIC_HOG 0
+#ifdef HOG2x2
+#define NUMBER_OF_CELLS 2
+#define NUMBER_OF_BINS 4
+#define GAUSSIAN_WEIGHTS 1
+#define SPARTIAL_WEIGHTS 1
+#define SIGNED_HOG 0
+#define STATIC_HOG 0
+#endif
 
 #ifndef BLOCK_SIZE
 #define BLOCK_SIZE 32
@@ -36,6 +51,7 @@
 #define NUMBER_OF_LOCATIONS 49
 #endif
 
+//Defaults as for HOG2x2.
 #ifndef NUMBER_OF_CELLS
 #define NUMBER_OF_CELLS 2
 #endif
@@ -73,11 +89,24 @@ void time_hog( const std::vector<carp::record_t>& pool, const std::vector<float>
             for ( auto & item : pool ) {
                 std::mt19937 rng(1);   //uses same seed, reseed for all iteration
 
+                cv::Mat cpu_orig = item.cpuimg();
                 cv::Mat cpu_gray;
-                cv::cvtColor( item.cpuimg(), cpu_gray, CV_RGB2GRAY );
+                if (cpu_orig.empty()) {
+                    std::cerr << "  empty image..." << std::endl;
+                    break;
+                } else if (cpu_orig.channels() <= 1) {
+                    cpu_gray = cpu_orig;
+                } else {
+                    cv::cvtColor( cpu_orig, cpu_gray, CV_RGB2GRAY );
+                }
+
                 std::cout << "image path: " << item.path()   << std::endl;
                 std::cout << "image rows: " << cpu_gray.rows << std::endl;
                 std::cout << "image cols: " << cpu_gray.cols << std::endl;
+#if (1 == XOPENME)
+                xopenme_add_var_i(8, (char*) "  \"input_size_x\":%u", cpu_gray.rows);
+                xopenme_add_var_i(9, (char*) "  \"input_size_y\":%u", cpu_gray.cols);
+#endif
 
                 cv::Mat_<float> locations(num_positions, 2);
 #if !STATIC_HOG
@@ -170,6 +199,21 @@ void time_hog( const std::vector<carp::record_t>& pool, const std::vector<float>
                     prl_timings_dump();
                 }
 #endif
+
+#if (1 == XOPENME_DUMP_IMAGES)
+#ifdef WINDOWS
+                IplImage tmp;
+                tmp = cpu_result;
+                cvSaveImage("tmp-ck-state-hog-cpu.png", &tmp);
+                tmp = gpu_result;
+                cvSaveImage("tmp-ck-state-hog-gpu.png", &tmp);
+#else
+                cv::imwrite("tmp-ck-state-hog-cpu.png", cpu_result );
+                cv::imwrite("tmp-ck-state-hog-gpu.png", gpu_result );
+                cv::imwrite("tmp-ck-state-hog-diff-cpu-gpu.png", cv::abs(cpu_result-gpu_result) );
+#endif
+#endif
+
                 // Verifying the results
                 if ( cv::norm( cpu_result, gpu_result, cv::NORM_INF) > cv::norm( gpu_result, cv::NORM_INF)*1e-5 )
                 {
@@ -203,6 +247,23 @@ void time_hog( const std::vector<carp::record_t>& pool, const std::vector<float>
 
 int main(int argc, char* argv[])
 {
+
+#if (1 == XOPENME)
+    xopenme_init(1, 20);
+    xopenme_clock_start(0);
+
+    xopenme_add_var_i(0, (char*) "  \"number_of_cells\":%u"     , NUMBER_OF_CELLS     );
+    xopenme_add_var_i(1, (char*) "  \"number_of_bins\":%u"      , NUMBER_OF_BINS      );
+    xopenme_add_var_i(2, (char*) "  \"gaussian_weights\":%u"    , GAUSSIAN_WEIGHTS    );
+    xopenme_add_var_i(3, (char*) "  \"spartial_weights\":%u"    , SPARTIAL_WEIGHTS    );
+    xopenme_add_var_i(4, (char*) "  \"signed_hog\":%u"          , SIGNED_HOG          );
+    xopenme_add_var_i(5, (char*) "  \"static_hog\":%u"          , STATIC_HOG          );
+    xopenme_add_var_i(6, (char*) "  \"block_size\":%u"          , BLOCK_SIZE          );
+    xopenme_add_var_i(7, (char*) "  \"number_of_locations\":%u" , NUMBER_OF_LOCATIONS );
+#endif
+
+    int exit_code = EXIT_SUCCESS;
+
     try
     {
         prl_init((prl_init_flags)(PRL_TARGET_DEVICE_DYNAMIC | PRL_PROFILING_ENABLED));
@@ -218,13 +279,23 @@ int main(int argc, char* argv[])
 
         prl_shutdown();
 
-        return EXIT_SUCCESS;
+        exit_code = EXIT_SUCCESS;
     }
     catch(const std::exception& e)
     {
         std::cout << e.what() << std::endl;
 
         prl_shutdown();
-        return EXIT_FAILURE;
+
+        exit_code = EXIT_FAILURE;
     }
+
+#if (1 == XOPENME)
+    xopenme_clock_end(0);
+    xopenme_dump_state();
+    xopenme_finish();
+#endif
+
+    return exit_code;
+
 } // main
diff --git a/pencil-benchmarks-imageproc/include/utility.hpp b/pencil-benchmarks-imageproc/include/utility.hpp
index 5f1b6ce..2416933 100644
--- a/pencil-benchmarks-imageproc/include/utility.hpp
+++ b/pencil-benchmarks-imageproc/include/utility.hpp
@@ -49,7 +49,11 @@ private:
 
 public:
     cv::Mat cpuimg() const {
+#ifdef WINDOWS
+        return cvLoadImage(m_path);
+#else
         return cv::imread(m_path);
+#endif
     }
 
     std::string path() const {
